diff --git a/data/Employee_Bar_Graph.png b/data/Employee_Bar_Graph.png
deleted file mode 100644
index dc7b893..0000000
Binary files a/data/Employee_Bar_Graph.png and /dev/null differ
diff --git a/data/Employee_Pie_Chart.png b/data/Employee_Pie_Chart.png
deleted file mode 100644
index 5a66122..0000000
Binary files a/data/Employee_Pie_Chart.png and /dev/null differ
diff --git a/data/data_file.csv b/data/data_file.csv
deleted file mode 100644
index b9ec813..0000000
--- a/data/data_file.csv
+++ /dev/null
@@ -1,11 +0,0 @@
-emp_id,emp_name,emp_address,proficiency
-1,John,Bangalore,"c,c++,python"
-2,Mary,Hyderabad,"java,react,python"
-3,Sherlock,Mumbai,"c++,java,python,django"
-4,Ross Geller,Bangalore,"c++,django"
-5,Monica Geller,Mumbai,"c++,python"
-6,Rachel Green,Mumbai,"mongo_db,java"
-7,Sherlock,Mumbai,"css,html,javascript,bootstrap"
-8,Sherlock,Mumbai,"c++,xml,bootstrap"
-9,Sherlock,Mumbai,"xml,django"
-10,Marie,Hyderabad,"react,html"
diff --git a/data/datafile.json b/data/datafile.json
deleted file mode 100644
index fc5ac32..0000000
--- a/data/datafile.json
+++ /dev/null
@@ -1,64 +0,0 @@
-{
-    "employee_details":[
-        {
-            "emp_id":"1",
-            "emp_name":"John",
-            "emp_address":"Bangalore",
-            "proficiency":["c","c++","python"]
-        },
-        {
-            "emp_id":2,
-            "emp_name":"Mary",
-            "emp_address":"Hyderabad",
-            "proficiency":["java","react","python"]
-        },
-        {
-            "emp_id":"3",
-            "emp_name":"Sherlock",
-            "emp_address":"Mumbai",
-            "proficiency":["c++","java","python","django"]
-        },
-        {
-            "emp_id":"4",
-            "emp_name":"Ross Geller",
-            "emp_address":"Bangalore",
-            "proficiency":["c++","django"]
-        },
-        {
-            "emp_id":"5",
-            "emp_name":"Monica Geller",
-            "emp_address":"Mumbai",
-            "proficiency":["c++","python"]
-        },
-        {
-            "emp_id":"6",
-            "emp_name":"Rachel Green",
-            "emp_address":"Mumbai",
-            "proficiency":["mongo_db","java"]
-        },
-        {
-            "emp_id":"7",
-            "emp_name":"Sherlock",
-            "emp_address":"Mumbai",
-            "proficiency":["css","html","javascript","bootstrap"]
-        },
-        {
-            "emp_id":"8",
-            "emp_name":"Sherlock",
-            "emp_address":"Mumbai",
-            "proficiency":["c++","xml","bootstrap"]
-        },
-        {
-            "emp_id":"9",
-            "emp_name":"Sherlock",
-            "emp_address":"Mumbai",
-            "proficiency":["xml","django"]
-        },
-        {
-            "emp_id":"10",
-            "emp_name":"Marie",
-            "emp_address":"Hyderabad",
-            "proficiency":["react","html"]
-        }
-    ]
-}
\ No newline at end of file
diff --git a/notebooks/json_to_csv.ipynb b/notebooks/json_to_csv.ipynb
deleted file mode 100644
index e47c83e..0000000
--- a/notebooks/json_to_csv.ipynb
+++ /dev/null
@@ -1,316 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Conversion from json to csv format using python and the analysis using charts"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Step1: Importing the modules"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 1,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "import json \n",
-    "import csv \n",
-    "import os"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Step2:Changing the directory"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 2,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "os.chdir(\"../data\")"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Step3:Accessing the json file "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 3,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "{'employee_details': [{'emp_id': '1', 'emp_name': 'John', 'emp_address': 'Bangalore', 'proficiency': ['c', 'c++', 'python']}, {'emp_id': 2, 'emp_name': 'Mary', 'emp_address': 'Hyderabad', 'proficiency': ['java', 'react', 'python']}, {'emp_id': '3', 'emp_name': 'Sherlock', 'emp_address': 'Mumbai', 'proficiency': ['c++', 'java', 'python', 'django']}, {'emp_id': '4', 'emp_name': 'Ross Geller', 'emp_address': 'Bangalore', 'proficiency': ['c++', 'django']}, {'emp_id': '5', 'emp_name': 'Monica Geller', 'emp_address': 'Mumbai', 'proficiency': ['c++', 'python']}, {'emp_id': '6', 'emp_name': 'Rachel Green', 'emp_address': 'Mumbai', 'proficiency': ['mongo_db', 'java']}, {'emp_id': '7', 'emp_name': 'Sherlock', 'emp_address': 'Mumbai', 'proficiency': ['css', 'html', 'javascript', 'bootstrap']}, {'emp_id': '8', 'emp_name': 'Sherlock', 'emp_address': 'Mumbai', 'proficiency': ['c++', 'xml', 'bootstrap']}, {'emp_id': '9', 'emp_name': 'Sherlock', 'emp_address': 'Mumbai', 'proficiency': ['xml', 'django']}, {'emp_id': '10', 'emp_name': 'Marie', 'emp_address': 'Hyderabad', 'proficiency': ['react', 'html']}]}\n"
-     ]
-    }
-   ],
-   "source": [
-    "with open(\"datafile.json\") as json_file:\n",
-    "    data = json.load(json_file) \n",
-    "\n",
-    "print(data)\n",
-    "employee_data = data[\"employee_details\"] "
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Step4:Opening a CSV file in write Mode"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 4,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "data_file = open(\"data_file.csv\", 'w')  \n",
-    "csv_writer = csv.writer(data_file) #csv writer object\n",
-    "  \n",
-    "# Counter variable used for writing headers to the CSV file\n",
-    "count = 0"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Step5:Dictionary of tech stack analysis"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 5,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "tech_stack={\n",
-    "'c++':0,\n",
-    "'c':0,\n",
-    "'java':0,\n",
-    "'react':0,\n",
-    "'django':0,\n",
-    "'python':0,\n",
-    "'xml':0,\n",
-    "'mongo_db':0,\n",
-    "'html':0,\n",
-    "'css':0,\n",
-    "'javascript':0,\n",
-    "'bootstrap':0\n",
-    "}"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "### Step6:Write into CSV and also analyse the data "
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 6,
-   "metadata": {},
-   "outputs": [],
-   "source": [
-    "for emp in employee_data: \n",
-    "    data=[]\n",
-    "    if count == 0: \n",
-    "        header = emp.keys()  # Writing headers of CSV file \n",
-    "        csv_writer.writerow(header) \n",
-    "    \n",
-    "    count += 1 \n",
-    "    \n",
-    "    for val in emp.values():\n",
-    "        if(type(val)==list):\n",
-    "            s=','.join(val) #creating a comma seperated string for the tech_stack\n",
-    "            for v in val:\n",
-    "                tech_stack[v]+=1\n",
-    "            data.append(s)\n",
-    "        else:\n",
-    "            data.append(val)\n",
-    "    csv_writer.writerow(data) #writing rows into CSV file \n",
-    "    \n",
-    "data_file.close() #closing the csv file"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "metadata": {},
-   "source": [
-    "# Step6:No of Employees in total and tech stack preferences"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 7,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "10\n"
-     ]
-    }
-   ],
-   "source": [
-    "Employee_count=count\n",
-    "print(Employee_count)"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 8,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Number of employees who know  c++   5\n",
-      "Number of employees who know  c   1\n",
-      "Number of employees who know  java   3\n",
-      "Number of employees who know  react   2\n",
-      "Number of employees who know  django   3\n",
-      "Number of employees who know  python   4\n",
-      "Number of employees who know  xml   2\n",
-      "Number of employees who know  mongo_db   1\n",
-      "Number of employees who know  html   2\n",
-      "Number of employees who know  css   1\n",
-      "Number of employees who know  javascript   1\n",
-      "Number of employees who know  bootstrap   2\n"
-     ]
-    }
-   ],
-   "source": [
-    "for key in tech_stack.keys():\n",
-    "    print('Number of employees who know ',key,' ',tech_stack[key])"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 9,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "text/plain": [
-       "<Figure size 800x400 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "import matplotlib.pyplot as plt\n",
-    "fig = plt.figure(figsize=(8,4))\n",
-    "ax = fig.add_axes([0,0,1,1])\n",
-    "\n",
-    "technology =tech_stack.keys()\n",
-    "employees =tech_stack.values()\n",
-    "ax.bar(technology ,employees)\n",
-    "plt.title('Employee Tech stack Plot -Bar chart')\n",
-    "plt.xlabel('Technology stack')\n",
-    "plt.ylabel('No of Employees')\n",
-    "plt.savefig('Employee_Bar_Graph.png',bbox_inches='tight')\n",
-    "plt.show()\n"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 10,
-   "metadata": {},
-   "outputs": [
-    {
-     "data": {
-      "image/png": "\n",
-      "text/plain": [
-       "<Figure size 432x288 with 1 Axes>"
-      ]
-     },
-     "metadata": {},
-     "output_type": "display_data"
-    }
-   ],
-   "source": [
-    "fig = plt.figure()\n",
-    "ax = fig.add_axes([0,0,1,1])\n",
-    "ax.axis('equal')\n",
-    "plt.title('Employee Tech stack Plot -Pie chart')\n",
-    "ax.pie(employees, labels = technology ,autopct='%1.2f%%')\n",
-    "plt.savefig('Employee_Pie_Chart.png',bbox_inches='tight')\n",
-    "plt.show()"
-   ]
-  },
-  {
-   "cell_type": "code",
-   "execution_count": 11,
-   "metadata": {},
-   "outputs": [
-    {
-     "name": "stdout",
-     "output_type": "stream",
-     "text": [
-      "Number of people to be given  c++  training is  5\n",
-      "Number of people to be given  c  training is  9\n",
-      "Number of people to be given  java  training is  7\n",
-      "Number of people to be given  react  training is  8\n",
-      "Number of people to be given  django  training is  7\n",
-      "Number of people to be given  python  training is  6\n",
-      "Number of people to be given  xml  training is  8\n",
-      "Number of people to be given  mongo_db  training is  9\n",
-      "Number of people to be given  html  training is  8\n",
-      "Number of people to be given  css  training is  9\n",
-      "Number of people to be given  javascript  training is  9\n",
-      "Number of people to be given  bootstrap  training is  8\n"
-     ]
-    }
-   ],
-   "source": [
-    "for key in tech_stack.keys():\n",
-    "    print('Number of people to be given ',key,' training is ',Employee_count-tech_stack[key])"
-   ]
-  }
- ],
- "metadata": {
-  "kernelspec": {
-   "display_name": "Python 3",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.6.5"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 2
-}
